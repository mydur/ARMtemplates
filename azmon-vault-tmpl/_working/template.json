{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Project": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Identifier for the project, application or customer -=- PLEASE ONLY USE LOWER CASE AND NUMBERS -=-"
      }
    },
    "Environment": {
      "type": "string",
      "allowedValues": [
        "dev",
        "test",
        "acc",
        "prod"
      ],
      "defaultValue": "test",
      "metadata": {
        "description": "Can be one of the following, dev-test-acc-prod"
      }
    },
    "UniqueNumber": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Unique number to add to the name of the accounts."
      }
    },
    "workspaceName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specify the workspace name -=- PLEASE ONLY USE LOWER CASE AND NUMBERS -=-"
      }
    },
    "workspaceRGName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specify the workspace resource group name -=- PLEASE ONLY USE LOWER CASE AND NUMBERS -=-"
      }
    },
    "instantRpRetentionRangeInDays": {
      "type": "int",
      "defaultValue": 2,
      "allowedValues": [
        1,
        2,
        3,
        4,
        5
      ],
      "metadata": {
        "description": "Number of days Instant Recovery Point should be retained"
      }
    },
    "dailyRetentionDurationCount": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "Number of days you want to retain the backup"
      }
    },
    "weeklyRetentionDurationCount": {
      "type": "int",
      "defaultValue": 12,
      "metadata": {
        "description": "Number of weeks you want to retain the backup"
      }
    },
    "monthlyRetentionDurationCount": {
      "type": "int",
      "defaultValue": 60,
      "metadata": {
        "description": "Number of months you want to retain the backup"
      }
    },
    "yearlyRetentionDurationCount": {
      "type": "int",
      "defaultValue": 10,
      "metadata": {
        "description": "Number of years you want to retain the backup"
      }
    },
    "redundancyType": {
      "type": "string",
      "defaultValue": "LocallyRedundant",
      "allowedValues": [
        "LocallyRedundant",
        "GeoRedundant"
      ],
      "metadata": {
        "description": "Redundancy type for the storage where backup is stored (LocallyRedundant or GeoRedundant)"
      }
    },
    "CreatedOn": {
      "defaultValue": "[utcNow()]",
      "type": "string"
    },
    "EndsOn": {
      "defaultValue": "yyyymmdd",
      "type": "String"
    },
    "CreatedBy": {
      "defaultValue": "Default",
      "type": "String"
    },
    "OwnedBy": {
      "defaultValue": "Default",
      "type": "String"
    }
  },
  "variables": {
    "TemplateId": "azmon-vault",
    "TemplateVersion": "1.0.10",
    "TemplateDate": "20190913",
    "TemplateDescription": "Added resource locks",
    "TemplateUsage": "Used to create backup vault and initial configuration",
    "TemplateDocumentation": "<Name of document.>",
    "Project": "[toLower(replace(parameters('Project'), '-', ''))]",
    "Environment": "[toLower(parameters('Environment'))]",
    "WorkspaceRGName": "[toLower(parameters('WorkspaceRGName'))]",
    "WorkspaceName": "[toLower(parameters('WorkspaceName'))]",
    "actionGroupName": "[concat('backup-', variables('Project'), '-', variables('Environment'), '-agrp')]",
    "actionGroupShortName": "[take(concat('bkup', variables('Project')), 12)]",
    "emailAddress": "dummy@nowhere.com",
    "backupVaultName": "[concat(variables('Project'), parameters('UniqueNumber'), '-', variables('Environment'), '-bvlt')]"
  },
  "resources": [
    {
      "type": "Microsoft.RecoveryServices/vaults",
      "apiVersion": "2016-06-01",
      "name": "[variables('backupVaultName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]"
      },
      "properties": {
      },
      "sku": {
        "name": "RS0",
        "tier": "Standard"
      },
      "resources": [
        {
          "apiVersion": "2016-06-01",
          "name": "[concat('file-nightly0100')]",
          "type": "backupPolicies",
          "dependsOn": [
            "[concat('Microsoft.RecoveryServices/vaults/', variables('backupVaultName'))]"
          ],
          "location": "westeurope",
          "properties": {
            "backupManagementType": "AzureStorage",
            "workloadType": "AzureFileShare",
            "schedulePolicy": {
              "scheduleRunFrequency": "Daily",
              "scheduleRunDays": null,
              "scheduleRunTimes": [
                "03:00"
              ],
              "schedulePolicyType": "SimpleSchedulePolicy"
            },
            "retentionPolicy": {
              "dailySchedule": {
                "retentionTimes": [
                  "03:00"
                ],
                "retentionDuration": {
                  "count": 180,
                  "durationType": "Days"
                }
              },
              "retentionPolicyType": "LongTermRetentionPolicy"
            },
            "timeZone": "Romance Standard Time"
          }
        },
        {
          "apiVersion": "2016-06-01",
          "name": "[concat('vm-nightly0300')]",
          "type": "backupPolicies",
          "dependsOn": [
            "[concat('Microsoft.RecoveryServices/vaults/', variables('backupVaultName'))]"
          ],
          "location": "westeurope",
          "properties": {
            "backupManagementType": "AzureIaasVM",
            "instantRpRetentionRangeInDays": "[parameters('instantRpRetentionRangeInDays')]",
            "schedulePolicy": {
              "scheduleRunFrequency": "Daily",
              "scheduleRunDays": null,
              "scheduleRunTimes": [
                "05:00"
              ],
              "schedulePolicyType": "SimpleSchedulePolicy"
            },
            "retentionPolicy": {
              "dailySchedule": {
                "retentionTimes": [
                  "05:00"
                ],
                "retentionDuration": {
                  "count": "[parameters('dailyRetentionDurationCount')]",
                  "durationType": "Days"
                }
              },
              "weeklySchedule": {
                "daysOfTheWeek": [
                  "Sunday"
                ],
                "retentionTimes": [
                  "05:00"
                ],
                "retentionDuration": {
                  "count": "[parameters('weeklyRetentionDurationCount')]",
                  "durationType": "Weeks"
                }
              },
              "monthlySchedule": {
                "retentionScheduleFormatType": "Daily",
                "retentionScheduleDaily": {
                  "daysOfTheMonth": [
                    {
                      "date": 1,
                      "isLast": false
                    }
                  ]
                },
                "retentionScheduleWeekly": null,
                "retentionTimes": [
                  "05:00"
                ],
                "retentionDuration": {
                  "count": "[parameters('monthlyRetentionDurationCount')]",
                  "durationType": "Months"
                }
              },
              "yearlySchedule": {
                "retentionScheduleFormatType": "Daily",
                "monthsOfYear": [
                  "January"
                ],
                "retentionScheduleDaily": {
                  "daysOfTheMonth": [
                    {
                      "date": 1,
                      "isLast": false
                    }
                  ]
                },
                "retentionScheduleWeekly": null,
                "retentionTimes": [
                  "05:00"
                ],
                "retentionDuration": {
                  "count": "[parameters('yearlyRetentionDurationCount')]",
                  "durationType": "Years"
                }
              },
              "retentionPolicyType": "LongTermRetentionPolicy"
            },
            "timeZone": "Romance Standard Time"
          }
        }
      ]
    },
    {
      "type": "Microsoft.RecoveryServices/vaults/providers/locks",
      "name": "[concat(variables('backupVaultName'), '/Microsoft.Authorization/recoveryserviceslock')]",
      "apiVersion": "2016-09-01",
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults', variables('backupVaultName'))]"
      ],
      "properties": {
        "level": "CannotDelete",
        "notes": "Backup vault should not be deleted."
      }
    },
    {
      "name": "[concat(variables('backupVaultName'), '/vaultstorageconfig')]",
      "type": "Microsoft.RecoveryServices/vaults/backupstorageconfig",
      "apiVersion": "2016-12-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "storageModelType": "[parameters('redundancyType')]",
        "storageType": "[parameters('redundancyType')]",
        "storageTypeState": "Unlocked"
      },
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults', variables('backupVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.RecoveryServices/vaults/providers/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "name": "[concat(variables('backupVaultName'), '/Microsoft.Insights/', variables('workspaceName'))]",
      "location": "westeurope",
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults', variables('backupVaultName'))]"
      ],
      "properties": {
        "name": "[variables('workspaceName')]",
        "storageAccountId": null,
        "eventHubAuthorizationRuleId": null,
        "eventHubName": null,
        "workspaceId": "[resourceId(variables('workspaceRGName'), 'microsoft.operationalinsights/workspaces/', variables('workspaceName'))]",
        "logs": [
          {
            "category": "AzureBackupReport",
            "enabled": true,
            "retentionPolicy": {
              "days": 7,
              "enabled": false
            }
          }
        ],
        "metrics": [
        ]
      }
    },
    {
      "type": "microsoft.insights/actionGroups",
      "name": "[variables('actionGroupName')]",
      "apiVersion": "2018-03-01",
      "location": "Global",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]"
      },
      "properties": {
        "groupShortName": "[variables('actionGroupShortName')]",
        "enabled": true,
        "emailReceivers": [
          {
            "name": "[concat(variables('backupVaultName'), ' SMTP_EmailAction')]",
            "emailAddress": "[variables('EmailAddress')]"
          }
        ],
        "smsReceivers": [
        ],
        "webhookReceivers": [
        ],
        "itsmReceivers": [
        ],
        "azureAppPushReceivers": [
        ],
        "automationRunbookReceivers": [
        ],
        "voiceReceivers": [
        ],
        "logicAppReceivers": [
        ],
        "azureFunctionReceivers": [
        ]
      },
      "dependsOn": [
      ]
    },
    {
      "name": "[concat('AzBackup - ', variables('backupVaultName'), ' - Job failure')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-16",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]"
      },
      "properties": {
        "description": "[concat('AzBackup - ', variables('backupVaultName'), ' - Job failure')]",
        "enabled": "true",
        "source": {
          "query": "[concat('let bkupVaultName = \"', variables('backupVaultName'), '\";\r\nAzureDiagnostics \r\n| where Category == \"AzureBackupReport\" \r\n| where OperationName == \"Job\" \r\n//| where TimeGenerated > ago(6h) \r\n| where ResourceType == \"VAULTS\" \r\n| where Resource == bkupVaultName \r\n| where JobStatus_s == \"Failed\" \r\n| summarize count() by Resource ')]",
          "datasourceId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', variables('workspaceRGName'), '/providers/microsoft.operationalinsights/workspaces/', variables('workspaceName'))]",
          "queryType": "ResultCount",
          "authorizedResources": [
            "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', variables('workspaceRGName'), '/providers/microsoft.operationalinsights/workspaces/', variables('workspaceName'))]"
          ]
        },
        "schedule": {
          "frequencyInMinutes": 360,
          "timeWindowInMinutes": 365
        },
        "action": {
          "severity": "2",
          "aznsAction": {
            "actionGroup": [
              "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
            ]
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 0
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
      ]
    },
    {
      "name": "[concat('AzBackup - ', variables('backupVaultName'), ' - Delete protection policy')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-16",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]"
      },
      "properties": {
        "description": "[concat('AzBackup - ', variables('backupVaultName'), ' - Delete protection policy')]",
        "enabled": "true",
        "source": {
          "query": "[concat('AzureActivity\r\n| where ResourceProvider == \"Microsoft.RecoveryServices\" \r\n| where OperationName == \"Delete Protection Policy\" \r\n| where ResourceId contains \"', variables('backupVaultName'), '\" \r\n| where ActivityStatus == \"Started\" \r\n| summarize count() by Resource')]",
          "datasourceId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', variables('workspaceRGName'), '/providers/microsoft.operationalinsights/workspaces/', variables('workspaceName'))]",
          "queryType": "ResultCount",
          "authorizedResources": [
            "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', variables('workspaceRGName'), '/providers/microsoft.operationalinsights/workspaces/', variables('workspaceName'))]"
          ]
        },
        "schedule": {
          "frequencyInMinutes": 360,
          "timeWindowInMinutes": 365
        },
        "action": {
          "severity": "2",
          "aznsAction": {
            "actionGroup": [
              "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
            ]
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 0
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
      ]
    },
    {
      "name": "[concat('AzBackup - ', variables('backupVaultName'), ' - Delete protected items')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-16",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]"
      },
      "properties": {
        "description": "[concat('AzBackup - ', variables('backupVaultName'), ' - Delete protection policy')]",
        "enabled": "true",
        "source": {
          "query": "[concat('AzureActivity\r\n| where ResourceProvider == \"Microsoft.RecoveryServices\" \r\n| where OperationName == \"Delete Protected Items\" \r\n| where ResourceId contains \"', variables('backupVaultName'), '\" \r\n| where ActivityStatus == \"Started\" \r\n| summarize count() by Resource')]",
          "datasourceId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', variables('workspaceRGName'), '/providers/microsoft.operationalinsights/workspaces/', variables('workspaceName'))]",
          "queryType": "ResultCount",
          "authorizedResources": [
            "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', variables('workspaceRGName'), '/providers/microsoft.operationalinsights/workspaces/', variables('workspaceName'))]"
          ]
        },
        "schedule": {
          "frequencyInMinutes": 360,
          "timeWindowInMinutes": 365
        },
        "action": {
          "severity": "2",
          "aznsAction": {
            "actionGroup": [
              "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
            ]
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 0
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
      ]
    }
  ],
  "outputs": {
    "BackupVaultName": {
      "type": "string",
      "value": "[variables('backupVaultName')]"
    },
    "BackupVaultId": {
      "type": "string",
      "value": "[resourceId('Microsoft.RecoveryServices/vaults', variables('backupVaultName'))]"
    },
    "ActionGroupId": {
      "type": "string",
      "value": "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
    },
    "TemplateVersion": {
      "type": "string",
      "value": "[variables('TemplateVersion')]"
    },
    "TemplateDate": {
      "type": "string",
      "value": "[variables('TemplateDate')]"
    }
  }
}
