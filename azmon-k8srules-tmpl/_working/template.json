{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Project": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Identifier for the project, application or customer -=- PLEASE ONLY USE LOWER CASE AND NUMBERS -=-"
      }
    },
    "Environment": {
      "type": "string",
      "allowedValues": [
        "dev",
        "test",
        "acc",
        "prod"
      ],
      "defaultValue": "test",
      "metadata": {
        "description": "Can one of the following, dev-test-acc-prod"
      }
    },
    "K8SClusterName": {
      "type": "string",
      "metadata": {
        "description": "AKS Cluster Resource Name"
      }
    },
    "K8SResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "AKS Cluster Resource Group"
      }
    },
    "AMLWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "Azure Monitor Log Analytics Workspace Name"
      }
    },
    "AMLResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Azure Monitor Log Analytics Workspace Resource Group"
      }
    },
    "CreatedOn": {
      "defaultValue": "[utcNow()]",
      "type": "String"
    },
    "EndsOn": {
      "defaultValue": "yyyymmdd",
      "type": "String"
    },
    "CreatedBy": {
      "defaultValue": "Default",
      "type": "String"
    },
    "OwnedBy": {
      "defaultValue": "Default",
      "type": "String"
    }
  },
  "variables": {
    "TemplateId": "azmon-k8srules",
    "TemplateVersion": "1.0.1",
    "TemplateDate": "20200221",
    "TemplateDescription": "Revision of freq and period",
    "TemplateUsage": "Deploy the K8S alerting rules and activate monitoring for the cluster",
    "TemplateDocumentation": "<Name of document.>",
    "Project": "[toLower(replace(parameters('Project'), '-', ''))]",
    "Environment": "[toLower(parameters('Environment'))]",
    "AMLRG": "[toLower(parameters('AMLResourceGroup'))]",
    "AMLName": "[toLower(parameters('AMLWorkspaceName'))]",
    "K8SRG": "[toLower(parameters('K8SResourceGroup'))]",
    "AMLResourceId": "[resourceId(variables('AMLRG'), 'microsoft.operationalinsights/workspaces', parameters('AMLWorkspaceName'))]",
    "K8SResourceId": "[resourceId(variables('K8SRG'), 'Microsoft.ContainerService/managedClusters', parameters('K8SClusterName'))]",
    "actionGroupName": "[concat('k8srules-', variables('Project'), '-', variables('Environment'), '-agrp')]",
    "actionGroupShortName": "[take(concat('k8srules', variables('Project')), 12)]",
    "alertTag": "[concat('hidden-link:', '/subscriptions/', subscription().subscriptionId, '/resourcegroups/', variables('AMLRG'), '/providers/microsoft.operationalinsights/workspaces/', variables('AMLName'))]",
    "datasourceId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', variables('AMLRG'), '/providers/microsoft.operationalinsights/workspaces/', variables('AMLName'))]",
    "authorizedResources": "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', variables('AMLRG'), '/providers/microsoft.operationalinsights/workspaces/', variables('AMLName'))]",
    "emailAddress": "dummy@nowhere.com"
  },
  "resources": [
    {
      "name": "[parameters('K8SClusterName')]",
      "type": "Microsoft.ContainerService/managedClusters",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "apiVersion": "2018-03-31",
      "properties": {
        "mode": "Incremental",
        "id": "[variables('K8SResourceId')]",
        "addonProfiles": {
          "omsagent": {
            "enabled": true,
            "config": {
              "logAnalyticsWorkspaceResourceID": "[variables('AMLResourceId')]"
            }
          }
        }
      }
    },
    {
      "name": "[concat('K8S - Pods that are failing or recovered from failure (', parameters('K8SClusterName'), ')')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-16",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]",
        "[variables('alertTag')]": "Resource"
      },
      "properties": {
        "description": "[concat('K8S - Pods that are failing or recovered from failure (', parameters('K8SClusterName'), ')')]",
        "enabled": "true",
        "source": {
          "query": "[concat('KubeEvents \r\n| where ClusterName =~ \"', parameters('K8SClusterName'), '\"\r\n| where ObjectKind =~ \"Pod\"\r\n| where Reason =~ \"BackOff\"\r\n| project TimeGenerated, Count, Computer\r\n| summarize AggregatedValue=sum(Count) by bin(TimeGenerated, 15m), Computer')]",
          "datasourceId": "[variables('datasourceId')]",
          "queryType": "ResultCount",
          "authorizedResources": [
            "[variables('authorizedResources')]"
          ]
        },
        "schedule": {
          "frequencyInMinutes": 15,
          "timeWindowInMinutes": 45
        },
        "action": {
          "severity": "1",
          "aznsAction": {
            "actionGroup": [
              "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
            ]
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 15,
            "metricTrigger": {
              "thresholdOperator": "GreaterThan",
              "threshold": 2,
              "metricTriggerType": "Consecutive",
              "metricColumn": "Computer"
            }
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
      ]
    },
    {
      "name": "[concat('K8S - Pods are being evicted (', parameters('K8SClusterName'), ')')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-16",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]",
        "[variables('alertTag')]": "Resource"
      },
      "properties": {
        "description": "[concat('K8S - Pods are being evicted (', parameters('K8SClusterName'), ')')]",
        "enabled": "true",
        "source": {
          "query": "[concat('KubeEvents \r\n| where ClusterName =~ \"', parameters('K8SClusterName'), '\"\r\n| where Reason =~ \"Evicted\"\r\n| project TimeGenerated, Count, Computer\r\n| summarize AggregatedValue=sum(Count) by bin(TimeGenerated, 15m), Computer')]",
          "datasourceId": "[variables('datasourceId')]",
          "queryType": "ResultCount",
          "authorizedResources": [
            "[variables('authorizedResources')]"
          ]
        },
        "schedule": {
          "frequencyInMinutes": 15,
          "timeWindowInMinutes": 45
        },
        "action": {
          "severity": "1",
          "aznsAction": {
            "actionGroup": [
              "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
            ]
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 10,
            "metricTrigger": {
              "thresholdOperator": "GreaterThan",
              "threshold": 2,
              "metricTriggerType": "Consecutive",
              "metricColumn": "Computer"
            }
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
      ]
    },
    {
      "name": "[concat('K8S - Storage related issues have been detected (', parameters('K8SClusterName'), ')')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-16",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]",
        "[variables('alertTag')]": "Resource"
      },
      "properties": {
        "description": "[concat('K8S - Storage related issues have been detected (', parameters('K8SClusterName'), ')')]",
        "enabled": "true",
        "source": {
          "query": "[concat('KubeEvents \r\n| where ClusterName =~ \"', parameters('K8SClusterName'), '\"\r\n| where Reason =~ \"FailedMount\" or Reason =~ \"FailedAttachVolume\" \r\n| project TimeGenerated, Count, Computer\r\n| summarize AggregatedValue=sum(Count) by bin(TimeGenerated, 15m), Computer ')]",
          "datasourceId": "[variables('datasourceId')]",
          "queryType": "ResultCount",
          "authorizedResources": [
            "[variables('authorizedResources')]"
          ]
        },
        "schedule": {
          "frequencyInMinutes": 15,
          "timeWindowInMinutes": 45
        },
        "action": {
          "severity": "1",
          "aznsAction": {
            "actionGroup": [
              "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
            ]
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 10,
            "metricTrigger": {
              "thresholdOperator": "GreaterThan",
              "threshold": 2,
              "metricTriggerType": "Consecutive",
              "metricColumn": "Computer"
            }
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
      ]
    },
    {
      "name": "[concat('K8S - Scheduler unable to find node to run pod (', parameters('K8SClusterName'), ')')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-16",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]",
        "[variables('alertTag')]": "Resource"
      },
      "properties": {
        "description": "[concat('K8S - Scheduler unable to find node to run pod (', parameters('K8SClusterName'), ')')]",
        "enabled": "true",
        "source": {
          "query": "[concat('KubeEvents \r\n| where ClusterName =~ \"', parameters('K8SClusterName'), '\"\r\n| where Reason =~ \"FailedScheduling\"\r\n| project TimeGenerated, Count, ClusterName\r\n| summarize AggregatedValue=sum(Count) by bin(TimeGenerated, 15m), ClusterName')]",
          "datasourceId": "[variables('datasourceId')]",
          "queryType": "ResultCount",
          "authorizedResources": [
            "[variables('authorizedResources')]"
          ]
        },
        "schedule": {
          "frequencyInMinutes": 15,
          "timeWindowInMinutes": 45
        },
        "action": {
          "severity": "1",
          "aznsAction": {
            "actionGroup": [
              "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
            ]
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 10,
            "metricTrigger": {
              "thresholdOperator": "GreaterThan",
              "threshold": 2,
              "metricTriggerType": "Consecutive",
              "metricColumn": "ClusterName"
            }
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
      ]
    },
    {
      "name": "[concat('K8S - Node not ready or not schedulable (', parameters('K8SClusterName'), ')')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-16",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]",
        "[variables('alertTag')]": "Resource"
      },
      "properties": {
        "description": "[concat('K8S - Node not ready or not schedulable (', parameters('K8SClusterName'), ')')]",
        "enabled": "true",
        "source": {
          "query": "[concat('KubeEvents \r\n| where ClusterName =~ \"', parameters('K8SClusterName'), '\"\r\n| where Reason =~ \"NodeNotReady\" or Reason =~ \"NodeNotSchedulable\" \r\n| project TimeGenerated, Count, Computer\r\n| summarize AggregatedValue=sum(Count) by bin(TimeGenerated, 15m), Computer ')]",
          "datasourceId": "[variables('datasourceId')]",
          "queryType": "ResultCount",
          "authorizedResources": [
            "[variables('authorizedResources')]"
          ]
        },
        "schedule": {
          "frequencyInMinutes": 15,
          "timeWindowInMinutes": 45
        },
        "action": {
          "severity": "1",
          "aznsAction": {
            "actionGroup": [
              "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
            ]
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 10,
            "metricTrigger": {
              "thresholdOperator": "GreaterThan",
              "threshold": 2,
              "metricTriggerType": "Consecutive",
              "metricColumn": "Computer"
            }
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
      ]
    },
    {
      "name": "[concat('K8S - Too many failures detected in short time-span (', parameters('K8SClusterName'), ')')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-16",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]",
        "[variables('alertTag')]": "Resource"
      },
      "properties": {
        "description": "[concat('K8S - Too many failures detected in short time-span (', parameters('K8SClusterName'), ')')]",
        "enabled": "true",
        "source": {
          "query": "[concat('KubeEvents \r\n| where ClusterName =~ \"', parameters('K8SClusterName'), '\"\r\n| where Reason contains \"Fail\"\r\n| project TimeGenerated, Count, ClusterName\r\n| summarize AggregatedValue=sum(Count) by bin(TimeGenerated, 15m), ClusterName')]",
          "datasourceId": "[variables('datasourceId')]",
          "queryType": "ResultCount",
          "authorizedResources": [
            "[variables('authorizedResources')]"
          ]
        },
        "schedule": {
          "frequencyInMinutes": 15,
          "timeWindowInMinutes": 45
        },
        "action": {
          "severity": "1",
          "aznsAction": {
            "actionGroup": [
              "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
            ]
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 25,
            "metricTrigger": {
              "thresholdOperator": "GreaterThan",
              "threshold": 2,
              "metricTriggerType": "Consecutive",
              "metricColumn": "ClusterName"
            }
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
      ]
    },
    {
      "name": "[concat('K8S - Nodes average CPU utilization in percent (Warning) (', parameters('K8SClusterName'), ')')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-16",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]",
        "[variables('alertTag')]": "Resource"
      },
      "properties": {
        "description": "[concat('K8S - Nodes average CPU utilization in percent (Warning) (', parameters('K8SClusterName'), ')')]",
        "enabled": "true",
        "source": {
          "query": "[concat('let endDateTime = now();\r\nlet startDateTime = ago(60m);\r\nlet trendBinSize = 15m;\r\nlet capacityCounterName = \"cpuCapacityNanoCores\";\r\nlet usageCounterName = \"cpuUsageNanoCores\";\r\nKubeNodeInventory\r\n| where TimeGenerated < endDateTime\r\n| where TimeGenerated >= startDateTime\r\n| where ClusterName =~ \"', parameters('K8SClusterName'), '\" \r\n| distinct ClusterName, Computer\r\n| join hint.strategy=shuffle (\r\nPerf\r\n| where TimeGenerated < endDateTime\r\n| where TimeGenerated >= startDateTime\r\n| where ObjectName == \"K8SNode\"\r\n| where CounterName == capacityCounterName\r\n| summarize LimitValue = max(CounterValue) by Computer, CounterName, bin(TimeGenerated, trendBinSize)\r\n| project Computer, CapacityStartTime = TimeGenerated, CapacityEndTime = TimeGenerated + trendBinSize, LimitValue\r\n) on Computer\r\n| join kind=inner hint.strategy=shuffle (\r\nPerf\r\n| where TimeGenerated < endDateTime + trendBinSize\r\n| where TimeGenerated >= startDateTime - trendBinSize\r\n| where ObjectName == \"K8SNode\"\r\n| where CounterName == usageCounterName\r\n| project Computer, UsageValue = CounterValue, TimeGenerated\r\n) on Computer\r\n| where TimeGenerated >= CapacityStartTime and TimeGenerated < CapacityEndTime\r\n| project ClusterName, Computer, TimeGenerated, UsagePercent = UsageValue * 100.0 / LimitValue\r\n| summarize AggregatedValue = avg(UsagePercent) by bin(TimeGenerated, trendBinSize), Computer\r\n| where AggregatedValue <= 90 \r\n| order by TimeGenerated asc')]",
          "datasourceId": "[variables('datasourceId')]",
          "queryType": "ResultCount",
          "authorizedResources": [
            "[variables('authorizedResources')]"
          ]
        },
        "schedule": {
          "frequencyInMinutes": 15,
          "timeWindowInMinutes": 45
        },
        "action": {
          "severity": "1",
          "aznsAction": {
            "actionGroup": [
              "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
            ]
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 80,
            "metricTrigger": {
              "thresholdOperator": "GreaterThan",
              "threshold": 2,
              "metricTriggerType": "Consecutive",
              "metricColumn": "Computer"
            }
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
      ]
    },
    {
      "name": "[concat('K8S - Nodes average CPU utilization in percent (Critical) (', parameters('K8SClusterName'), ')')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-16",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]",
        "[variables('alertTag')]": "Resource"
      },
      "properties": {
        "description": "[concat('K8S - Nodes average CPU utilization in percent (Critical) (', parameters('K8SClusterName'), ')')]",
        "enabled": "true",
        "source": {
          "query": "[concat('let endDateTime = now();\r\nlet startDateTime = ago(60m);\r\nlet trendBinSize = 15m;\r\nlet capacityCounterName = \"cpuCapacityNanoCores\";\r\nlet usageCounterName = \"cpuUsageNanoCores\";\r\nKubeNodeInventory\r\n| where TimeGenerated < endDateTime\r\n| where TimeGenerated >= startDateTime\r\n| where ClusterName =~ \"', parameters('K8SClusterName'), '\" \r\n| distinct ClusterName, Computer\r\n| join hint.strategy=shuffle (\r\nPerf\r\n| where TimeGenerated < endDateTime\r\n| where TimeGenerated >= startDateTime\r\n| where ObjectName == \"K8SNode\"\r\n| where CounterName == capacityCounterName\r\n| summarize LimitValue = max(CounterValue) by Computer, CounterName, bin(TimeGenerated, trendBinSize)\r\n| project Computer, CapacityStartTime = TimeGenerated, CapacityEndTime = TimeGenerated + trendBinSize, LimitValue\r\n) on Computer\r\n| join kind=inner hint.strategy=shuffle (\r\nPerf\r\n| where TimeGenerated < endDateTime + trendBinSize\r\n| where TimeGenerated >= startDateTime - trendBinSize\r\n| where ObjectName == \"K8SNode\"\r\n| where CounterName == usageCounterName\r\n| project Computer, UsageValue = CounterValue, TimeGenerated\r\n) on Computer\r\n| where TimeGenerated >= CapacityStartTime and TimeGenerated < CapacityEndTime\r\n| project ClusterName, Computer, TimeGenerated, UsagePercent = UsageValue * 100.0 / LimitValue\r\n| summarize AggregatedValue = avg(UsagePercent) by bin(TimeGenerated, trendBinSize), Computer\r\n| order by TimeGenerated asc')]",
          "datasourceId": "[variables('datasourceId')]",
          "queryType": "ResultCount",
          "authorizedResources": [
            "[variables('authorizedResources')]"
          ]
        },
        "schedule": {
          "frequencyInMinutes": 15,
          "timeWindowInMinutes": 45
        },
        "action": {
          "severity": "1",
          "aznsAction": {
            "actionGroup": [
              "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
            ]
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 90,
            "metricTrigger": {
              "thresholdOperator": "GreaterThan",
              "threshold": 1,
              "metricTriggerType": "Consecutive",
              "metricColumn": "Computer"
            }
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
      ]
    },
    {
      "name": "[concat('K8S - Nodes average memory utilization in percent (Warning) (', parameters('K8SClusterName'), ')')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-16",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]",
        "[variables('alertTag')]": "Resource"
      },
      "properties": {
        "description": "[concat('K8S - Nodes average memory utilization in percent (Warning) (', parameters('K8SClusterName'), ')')]",
        "enabled": "true",
        "source": {
          "query": "[concat('let endDateTime = now();\r\nlet startDateTime = ago(60m);\r\nlet trendBinSize = 15m;\r\nlet capacityCounterName = \"memoryCapacityBytes\";\r\nlet usageCounterName = \"memoryRssBytes\";\r\nKubeNodeInventory\r\n| where TimeGenerated < endDateTime\r\n| where TimeGenerated >= startDateTime\r\n| where ClusterName =~ \"', parameters('K8SClusterName'), '\" \r\n| distinct ClusterName, Computer\r\n| join hint.strategy=shuffle (\r\nPerf\r\n| where TimeGenerated < endDateTime\r\n| where TimeGenerated >= startDateTime\r\n| where ObjectName == \"K8SNode\"\r\n| where CounterName == capacityCounterName\r\n| summarize LimitValue = max(CounterValue) by Computer, CounterName, bin(TimeGenerated, trendBinSize)\r\n| project Computer, CapacityStartTime = TimeGenerated, CapacityEndTime = TimeGenerated + trendBinSize, LimitValue\r\n) on Computer\r\n| join kind=inner hint.strategy=shuffle (\r\nPerf\r\n| where TimeGenerated < endDateTime + trendBinSize\r\n| where TimeGenerated >= startDateTime - trendBinSize\r\n| where ObjectName == \"K8SNode\"\r\n| where CounterName == usageCounterName\r\n| project Computer, UsageValue = CounterValue, TimeGenerated\r\n) on Computer\r\n| where TimeGenerated >= CapacityStartTime and TimeGenerated < CapacityEndTime\r\n| project ClusterName, Computer, TimeGenerated, UsagePercent = UsageValue * 100.0 / LimitValue\r\n| summarize AggregatedValue = avg(UsagePercent) by bin(TimeGenerated, trendBinSize), Computer\r\n| where AggregatedValue <= 95\r\n| order by TimeGenerated asc ')]",
          "datasourceId": "[variables('datasourceId')]",
          "queryType": "ResultCount",
          "authorizedResources": [
            "[variables('authorizedResources')]"
          ]
        },
        "schedule": {
          "frequencyInMinutes": 15,
          "timeWindowInMinutes": 45
        },
        "action": {
          "severity": "1",
          "aznsAction": {
            "actionGroup": [
              "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
            ]
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 85,
            "metricTrigger": {
              "thresholdOperator": "GreaterThan",
              "threshold": 2,
              "metricTriggerType": "Consecutive",
              "metricColumn": "Computer"
            }
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
      ]
    },
    {
      "name": "[concat('K8S - Nodes average memory utilization in percent (Critical) (', parameters('K8SClusterName'), ')')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-16",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]",
        "[variables('alertTag')]": "Resource"
      },
      "properties": {
        "description": "[concat('K8S - Nodes average memory utilization in percent (Critical) (', parameters('K8SClusterName'), ')')]",
        "enabled": "true",
        "source": {
          "query": "[concat('let endDateTime = now();\r\nlet startDateTime = ago(60m);\r\nlet trendBinSize = 15m;\r\nlet capacityCounterName = \"memoryCapacityBytes\";\r\nlet usageCounterName = \"memoryRssBytes\";\r\nKubeNodeInventory\r\n| where TimeGenerated < endDateTime\r\n| where TimeGenerated >= startDateTime\r\n| where ClusterName =~ \"', parameters('K8SClusterName'), '\" \r\n| distinct ClusterName, Computer\r\n| join hint.strategy=shuffle (\r\nPerf\r\n| where TimeGenerated < endDateTime\r\n| where TimeGenerated >= startDateTime\r\n| where ObjectName == \"K8SNode\"\r\n| where CounterName == capacityCounterName\r\n| summarize LimitValue = max(CounterValue) by Computer, CounterName, bin(TimeGenerated, trendBinSize)\r\n| project Computer, CapacityStartTime = TimeGenerated, CapacityEndTime = TimeGenerated + trendBinSize, LimitValue\r\n) on Computer\r\n| join kind=inner hint.strategy=shuffle (\r\nPerf\r\n| where TimeGenerated < endDateTime + trendBinSize\r\n| where TimeGenerated >= startDateTime - trendBinSize\r\n| where ObjectName == \"K8SNode\"\r\n| where CounterName == usageCounterName\r\n| project Computer, UsageValue = CounterValue, TimeGenerated\r\n) on Computer\r\n| where TimeGenerated >= CapacityStartTime and TimeGenerated < CapacityEndTime\r\n| project ClusterName, Computer, TimeGenerated, UsagePercent = UsageValue * 100.0 / LimitValue\r\n| summarize AggregatedValue = avg(UsagePercent) by bin(TimeGenerated, trendBinSize), Computer\r\n//| where AggregatedValue <= 95\r\n| order by TimeGenerated asc ')]",
          "datasourceId": "[variables('datasourceId')]",
          "queryType": "ResultCount",
          "authorizedResources": [
            "[variables('authorizedResources')]"
          ]
        },
        "schedule": {
          "frequencyInMinutes": 15,
          "timeWindowInMinutes": 45
        },
        "action": {
          "severity": "1",
          "aznsAction": {
            "actionGroup": [
              "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
            ]
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 95,
            "metricTrigger": {
              "thresholdOperator": "GreaterThan",
              "threshold": 1,
              "metricTriggerType": "Consecutive",
              "metricColumn": "Computer"
            }
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
      ]
    },
    {
      "name": "[concat('K8S - Percent failing Pods is too high (', parameters('K8SClusterName'), ')')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-16",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]",
        "[variables('alertTag')]": "Resource"
      },
      "properties": {
        "description": "[concat('K8S - Percent failing Pods is too high (', parameters('K8SClusterName'), ')')]",
        "enabled": "true",
        "source": {
          "query": "[concat('let endDateTime = now();\r\nlet startDateTime = ago(60m);\r\nlet trendBinSize = 15m;\r\nlet clusterName = \"', parameters('K8SClusterName'), '\";\r\nKubePodInventory\r\n| where TimeGenerated < endDateTime\r\n| where TimeGenerated >= startDateTime\r\n| where ClusterName == clusterName\r\n| distinct ClusterName, TimeGenerated\r\n| summarize ClusterSnapshotCount = count() by bin(TimeGenerated, trendBinSize), ClusterName\r\n| join hint.strategy=broadcast (\r\nKubePodInventory\r\n| where TimeGenerated < endDateTime\r\n| where TimeGenerated >= startDateTime\r\n| distinct ClusterName, Computer, PodUid, TimeGenerated, PodStatus\r\n| summarize TotalCount = count(),\r\nPendingCount = sumif(1, PodStatus =~ \"Pending\"),\r\nRunningCount = sumif(1, PodStatus =~ \"Running\"),\r\nSucceededCount = sumif(1, PodStatus =~ \"Succeeded\"),\r\nFailedCount = sumif(1, PodStatus =~ \"Failed\")\r\nby ClusterName, bin(TimeGenerated, trendBinSize)\r\n) on ClusterName, TimeGenerated\r\n| extend UnknownCount = TotalCount - PendingCount - RunningCount - SucceededCount - FailedCount\r\n| project TimeGenerated, ClusterName,\r\nTotalCount = todouble(TotalCount) / ClusterSnapshotCount,\r\nPendingCount = todouble(PendingCount) / ClusterSnapshotCount,\r\nPendingPercent = round((todouble(PendingCount) / todouble(TotalCount) * 100)), \r\nRunningCount = todouble(RunningCount) / ClusterSnapshotCount,\r\nRunningPercent = round((todouble(RunningCount) / todouble(TotalCount) * 100)),\r\nSucceededCount = todouble(SucceededCount) / ClusterSnapshotCount,\r\nSucceededPercent = round((todouble(SucceededCount) / todouble(TotalCount) * 100)),\r\nFailedCount = todouble(FailedCount) / ClusterSnapshotCount,\r\nFailedPercent = round((todouble(FailedCount) / todouble(TotalCount) * 100)),\r\nUnknownCount = todouble(UnknownCount) / ClusterSnapshotCount,\r\nUnknownPercent = round((todouble(UnknownCount) / todouble(TotalCount) * 100))\r\n| summarize AggregatedValue = avg(FailedPercent) by bin(TimeGenerated, trendBinSize), ClusterName')]",
          "datasourceId": "[variables('datasourceId')]",
          "queryType": "ResultCount",
          "authorizedResources": [
            "[variables('authorizedResources')]"
          ]
        },
        "schedule": {
          "frequencyInMinutes": 15,
          "timeWindowInMinutes": 45
        },
        "action": {
          "severity": "1",
          "aznsAction": {
            "actionGroup": [
              "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
            ]
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 10,
            "metricTrigger": {
              "thresholdOperator": "GreaterThan",
              "threshold": 2,
              "metricTriggerType": "Consecutive",
              "metricColumn": "ClutserName"
            }
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
      ]
    },
    {
      "name": "[concat('K8S - Percent unknown Pods is too high (', parameters('K8SClusterName'), ')')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-16",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]",
        "[variables('alertTag')]": "Resource"
      },
      "properties": {
        "description": "[concat('K8S - Percent unknown Pods is too high (', parameters('K8SClusterName'), ')')]",
        "enabled": "true",
        "source": {
          "query": "[concat('let endDateTime = now();\r\nlet startDateTime = ago(60m);\r\nlet trendBinSize = 15m;\r\nlet clusterName = \"', parameters('K8SClusterName'), '\";\r\nKubePodInventory\r\n| where TimeGenerated < endDateTime\r\n| where TimeGenerated >= startDateTime\r\n| where ClusterName == clusterName\r\n| distinct ClusterName, TimeGenerated\r\n| summarize ClusterSnapshotCount = count() by bin(TimeGenerated, trendBinSize), ClusterName\r\n| join hint.strategy=broadcast (\r\nKubePodInventory\r\n| where TimeGenerated < endDateTime\r\n| where TimeGenerated >= startDateTime\r\n| distinct ClusterName, Computer, PodUid, TimeGenerated, PodStatus\r\n| summarize TotalCount = count(),\r\nPendingCount = sumif(1, PodStatus =~ \"Pending\"),\r\nRunningCount = sumif(1, PodStatus =~ \"Running\"),\r\nSucceededCount = sumif(1, PodStatus =~ \"Succeeded\"),\r\nFailedCount = sumif(1, PodStatus =~ \"Failed\")\r\nby ClusterName, bin(TimeGenerated, trendBinSize)\r\n) on ClusterName, TimeGenerated\r\n| extend UnknownCount = TotalCount - PendingCount - RunningCount - SucceededCount - FailedCount\r\n| project TimeGenerated, ClusterName\r\nTotalCount = todouble(TotalCount) / ClusterSnapshotCount,\r\nPendingCount = todouble(PendingCount) / ClusterSnapshotCount,\r\nPendingPercent = round((todouble(PendingCount) / todouble(TotalCount) * 100)), \r\nRunningCount = todouble(RunningCount) / ClusterSnapshotCount,\r\nRunningPercent = round((todouble(RunningCount) / todouble(TotalCount) * 100)),\r\nSucceededCount = todouble(SucceededCount) / ClusterSnapshotCount,\r\nSucceededPercent = round((todouble(SucceededCount) / todouble(TotalCount) * 100)),\r\nFailedCount = todouble(FailedCount) / ClusterSnapshotCount,\r\nFailedPercent = round((todouble(FailedCount) / todouble(TotalCount) * 100)),\r\nUnknownCount = todouble(UnknownCount) / ClusterSnapshotCount,\r\nUnknownPercent = round((todouble(UnknownCount) / todouble(TotalCount) * 100))\r\n| summarize AggregatedValue = avg(UnknownPercent) by bin(TimeGenerated, trendBinSize), ClusterName')]",
          "datasourceId": "[variables('datasourceId')]",
          "queryType": "ResultCount",
          "authorizedResources": [
            "[variables('authorizedResources')]"
          ]
        },
        "schedule": {
          "frequencyInMinutes": 15,
          "timeWindowInMinutes": 45
        },
        "action": {
          "severity": "1",
          "aznsAction": {
            "actionGroup": [
              "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
            ]
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 20,
            "metricTrigger": {
              "thresholdOperator": "GreaterThan",
              "threshold": 2,
              "metricTriggerType": "Consecutive",
              "metricColumn": "ClutserName"
            }
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
      ]
    },
    {
      "name": "[concat('K8S - Cluster nodes disks free space used exceeded (Critical) (', parameters('K8SClusterName'), ')')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-16",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]",
        "[variables('alertTag')]": "Resource"
      },
      "properties": {
        "description": "[concat('K8S - Cluster nodes disks free space used exceeded (Critical) (', parameters('K8SClusterName'), ')')]",
        "enabled": "true",
        "source": {
          "query": "[concat('let clusterId = \"', variables('K8SResourceId'), '\";\r\nlet endDateTime = now();\r\nlet startDateTime = ago(60m);\r\nlet trendBinSize = 15m;\r\nInsightsMetrics\r\n| where TimeGenerated < endDateTime\r\n| where TimeGenerated >= startDateTime\r\n| where Origin == \"container.azm.ms/telegraf\" \r\n| where Namespace == \"container.azm.ms/disk\" \r\n| extend Tags = todynamic(Tags) \r\n| project TimeGenerated, ClusterId = Tags[\"container.azm.ms/clusterId\"], Computer = tostring(Tags.hostName), Device = tostring(Tags.device), Path = tostring(Tags.path), DiskMetricName = Name, DiskMetricValue = Val \r\n| where ClusterId =~ clusterId \r\n| where DiskMetricName == \"used_percent\"\r\n| summarize AggregatedValue = max(DiskMetricValue) by bin(TimeGenerated, trendBinSize), Device, Computer\r\n| order by TimeGenerated asc')]",
          "datasourceId": "[variables('datasourceId')]",
          "queryType": "ResultCount",
          "authorizedResources": [
            "[variables('authorizedResources')]"
          ]
        },
        "schedule": {
          "frequencyInMinutes": 15,
          "timeWindowInMinutes": 45
        },
        "action": {
          "severity": "1",
          "aznsAction": {
            "actionGroup": [
              "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
            ]
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 90,
            "metricTrigger": {
              "thresholdOperator": "GreaterThan",
              "threshold": 2,
              "metricTriggerType": "Consecutive",
              "metricColumn": "Computer"
            }
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
      ]
    },
    {
      "name": "[concat('K8S - Cluster nodes disks free space used exceeded (Warning) (', parameters('K8SClusterName'), ')')]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-16",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]",
        "[variables('alertTag')]": "Resource"
      },
      "properties": {
        "description": "[concat('K8S - Cluster nodes disks free space used exceeded (Warning) (', parameters('K8SClusterName'), ')')]",
        "enabled": "true",
        "source": {
          "query": "[concat('let clusterId = \"', variables('K8SResourceId'), '\";\r\nlet endDateTime = now();\r\nlet startDateTime = ago(60m);\r\nlet trendBinSize = 15m;\r\nInsightsMetrics\r\n| where TimeGenerated < endDateTime\r\n| where TimeGenerated >= startDateTime\r\n| where Origin == \"container.azm.ms/telegraf\" \r\n| where Namespace == \"container.azm.ms/disk\" \r\n| extend Tags = todynamic(Tags) \r\n| project TimeGenerated, ClusterId = Tags[\"container.azm.ms/clusterId\"], Computer = tostring(Tags.hostName), Device = tostring(Tags.device), Path = tostring(Tags.path), DiskMetricName = Name, DiskMetricValue = Val \r\n| where ClusterId =~ clusterId \r\n| where DiskMetricName == \"used_percent\"\r\n| summarize AggregatedValue = max(DiskMetricValue) by bin(TimeGenerated, trendBinSize), Device, Computer\r\n| where AggregatedValue <= 90\r\n| order by TimeGenerated asc')]",
          "datasourceId": "[variables('datasourceId')]",
          "queryType": "ResultCount",
          "authorizedResources": [
            "[variables('authorizedResources')]"
          ]
        },
        "schedule": {
          "frequencyInMinutes": 15,
          "timeWindowInMinutes": 60
        },
        "action": {
          "severity": "1",
          "aznsAction": {
            "actionGroup": [
              "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
            ]
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 80,
            "metricTrigger": {
              "thresholdOperator": "GreaterThan",
              "threshold": 3,
              "metricTriggerType": "Consecutive",
              "metricColumn": "Computer"
            }
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      },
      "dependsOn": [
        "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
      ]
    },
    {
      "type": "microsoft.insights/actionGroups",
      "name": "[variables('actionGroupName')]",
      "apiVersion": "2018-03-01",
      "location": "Global",
      "tags": {
        "TemplateId": "[variables('TemplateId')]",
        "TemplateVersion": "[variables('TemplateVersion')]",
        "CreatedOn": "[parameters('CreatedOn')]",
        "EndsOn": "[parameters('EndsOn')]",
        "CreatedBy": "[parameters('CreatedBy')]",
        "OwnedBy": "[parameters('OwnedBy')]",
        "Project": "[parameters('Project')]",
        "Environment": "[parameters('Environment')]"
      },
      "properties": {
        "groupShortName": "[variables('actionGroupShortName')]",
        "enabled": true,
        "emailReceivers": [
          {
            "name": "[concat(parameters('Project'), ' SMTP_-EmailAction-')]",
            "emailAddress": "[variables('emailAddress')]"
          }
        ],
        "smsReceivers": [
        ],
        "webhookReceivers": [
        ],
        "itsmReceivers": [
        ],
        "azureAppPushReceivers": [
        ],
        "automationRunbookReceivers": [
        ],
        "voiceReceivers": [
        ],
        "logicAppReceivers": [
        ],
        "azureFunctionReceivers": [
        ]
      },
      "dependsOn": [
      ]
    }
  ],
  "outputs": {
    "ActionGroupId": {
      "type": "string",
      "value": "[concat('/subscriptions/', subscription().subscriptionId, '/resourcegroups/', resourceGroup().name, '/providers/microsoft.insights/actionGroups/', variables('actionGroupName'))]"
    },
    "TemplateVersion": {
      "type": "string",
      "value": "[variables('TemplateVersion')]"
    },
    "TemplateDate": {
      "type": "string",
      "value": "[variables('TemplateDate')]"
    }
  }
}
